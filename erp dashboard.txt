📌Project Title: ERP Dashboard in Python

📌Description:The ERP Dashboard is a tool for managing and visualizing data related to students and faculty. It tracks academic performance, attendance, course enrollments, fee statuses, faculty ratings, class schedules, research publications, and training activities. Built using Python and libraries like Pandas and Matplotlib, it provides various visualizations such as histograms and pie charts

📌Project Overview
The ERP (Enterprise Resource Planning) dashboard is developed to handle institutional data, including:
✅ Student & Faculty Information
✅ Academic Performance Tracking
✅ Attendance Monitoring
✅ Course Enrollment Insights
✅ Fee Payment Status
✅ Faculty Performance & Feedback
✅ Class Scheduling
✅ Research & Publications
✅ Faculty-Student Interactions
✅ Training & Development Analysis

---

📌 Features & Implementation
The project is based on **`erp_dataset.csv`**, which contains fields such as ID, Name, Role, Department, Age, Gender, Attendance, etc.

1️⃣ Academic Performance Tracking
- Generates a **histogram** of students' academic scores.
- Uses **Seaborn’s `histplot`** to visualize score distribution.

2️⃣ Attendance Monitoring
- Uses a **pie chart** to show attendance percentages (Present/Absent).
- Attendance is randomly assigned using `np.random.choice()`.

3️⃣ Course Enrollment Insights
- Displays **department-wise enrollments** using a **bar chart**.
- Differentiates students and faculty using the **hue** parameter.

4️⃣ Behavior & Engagement Analysis
- **Scatter plot** showing the relationship between **Age** and **Academic Score**.
- Color-coded by **Gender** and marked by **Role (Faculty/Student)**.
5️⃣ Fee Payment Status**
- **Pie chart** showing the proportion of students with **Paid, Unpaid, and Partial** fee statuses.

6️⃣ Faculty Performance & Feedback
- **Histogram** showing **faculty rating distribution**.
- Ratings randomly assigned between **3.0 and 5.0** for faculty.

7️⃣ Class Scheduling & Availability
- **Line chart** showing **number of classes scheduled per month**.
- Uses **date ranges** to simulate scheduling trends.

8️⃣ Research & Publications Tracking
- **Bar chart** displaying **faculty publications count**.

9️⃣ Faculty-Student Interactions
- **Histogram** of **faculty-student interaction frequency**.
- Uses `np.random.randint()` to simulate interaction data.

🔟 Training & Professional Development
- **Scatter plot** showing the relationship between **Age** and **Training Hours**.



📌 Technologies Used
🔹Python (Primary Language)
🔹Pandas (Data Handling)
🔹NumPy (Random Data Generation)
🔹Matplotlib (Data Visualization)
🔹Google Colab (Execution Environment)

---

📌 Possible Improvements
🔹Add a Web UI** using **Streamlit/Django/Flask**.
🔹Real-time Data Integration** from an actual database.
🔹Improve Visuals** with **Plotly/Dash**.
-🔹Enhance Interactivity** by adding **filters & dropdowns**.


📌ERP Dashboard in Python with Code📌

Here is the **full code** for your **ERP Dashboard** in Python. This implementation covers all the major functionalities, including **data loading, visualization, and analytics** using **Pandas, NumPy, Matplotlib, and Seaborn**.



🔹 Step 1: Install and Import Dependencies
```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Set style for better visualization
sns.set_theme(style="darkgrid")
```

---

🔹 Step 2: Load Data
```python
# Load ERP dataset
erp_data = pd.read_csv("erp_dataset.csv")  # Ensure the dataset file is in the correct directory

# Display first few rows
print(erp_data.head())
```

---

🔹 Step 3: Academic Performance Tracking
```python
# Generating random academic scores (for testing purposes)
np.random.seed(0)
erp_data['Academic Score'] = np.random.randint(50, 100, erp_data.shape[0])

# Plot histogram of academic scores
plt.figure(figsize=(10, 6))
sns.histplot(erp_data['Academic Score'], bins=10, kde=True)
plt.title('Distribution of Academic Scores')
plt.xlabel('Score')
plt.ylabel('Frequency')
plt.show()
```

---

🔹 Step 4: Attendance Monitoring
```python
# Randomly assigning attendance status
erp_data['Attendance'] = np.random.choice(['Present', 'Absent'], erp_data.shape[0], p=[0.8, 0.2])

# Plot pie chart for attendance
attendance_counts = erp_data['Attendance'].value_counts()
plt.figure(figsize=(6, 6))
plt.pie(attendance_counts, labels=attendance_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Attendance Distribution')
plt.show()
```

---

🔹 Step 5: Course Enrollment Insights
```python
# Plot bar chart for department enrollments
plt.figure(figsize=(10, 6))
sns.countplot(data=erp_data, x='Department', hue='Role')
plt.title('Course Enrollment by Department')
plt.xlabel('Department')
plt.ylabel('Enrollment Count')
plt.xticks(rotation=45)
plt.legend(title='Role')
plt.show()
```

---

🔹 Step 6: Behavior and Engagement Analysis
```python
# Scatter plot for Age vs Academic Score
plt.figure(figsize=(10, 6))
sns.scatterplot(data=erp_data, x='Age', y='Academic Score', hue='Gender', style='Role')
plt.title('Behavior Analysis: Age vs Academic Score')
plt.xlabel('Age')
plt.ylabel('Academic Score')
plt.show()
```

---
🔹 Step 7: Fee Payment Status
```python
# Randomly assigning fee payment statuses
erp_data['Fee Status'] = np.random.choice(['Paid', 'Unpaid', 'Partial'], erp_data.shape[0], p=[0.7, 0.2, 0.1])

# Plot pie chart for fee payment status
fee_counts = erp_data['Fee Status'].value_counts()
plt.figure(figsize=(6, 6))
plt.pie(fee_counts, labels=fee_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Fee Payment Status')
plt.show()
```

---

🔹 Step 8: Faculty Performance and Feedback
```python
# Assign random faculty ratings
erp_data['Faculty Rating'] = np.where(erp_data['Role'] == 'Faculty', np.random.uniform(3.0, 5.0, erp_data.shape[0]), np.nan)

# Filter faculty ratings data
faculty_ratings = erp_data.dropna(subset=['Faculty Rating'])

# Plot histogram for faculty ratings
plt.figure(figsize=(10, 6))
sns.histplot(faculty_ratings['Faculty Rating'], bins=10, kde=True)
plt.title('Distribution of Faculty Ratings')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()
```

---

🔹 Step 9: Class Scheduling and Availability
```python
# Generating random class schedules
erp_data['Class Scheduled Month'] = np.random.choice(pd.date_range("2023-01-01", "2023-12-31", freq='M'), erp_data.shape[0])

# Grouping data by month
monthly_schedule = erp_data.groupby(erp_data['Class Scheduled Month'].dt.month).size()

# Plot line chart for class scheduling
monthly_schedule.plot(kind='line', marker='o', figsize=(10, 6))
plt.title('Class Scheduling Over the Year')
plt.xlabel('Month')
plt.ylabel('Number of Classes Scheduled')
plt.show()
```

---

🔹 Step 10: Research and Publications Tracking
```python
# Assign random publication counts to faculty
erp_data['Publications'] = np.where(erp_data['Role'] == 'Faculty', np.random.randint(0, 10, erp_data.shape[0]), 0)

# Filter faculty publication data
faculty_publications = erp_data[erp_data['Role'] == 'Faculty']

# Plot bar chart for faculty publications
plt.figure(figsize=(10, 6))
sns.barplot(data=faculty_publications, x='Name', y='Publications', errorbar=None)
plt.title('Research Publications by Faculty')
plt.xlabel('Faculty')
plt.ylabel('Number of Publications')
plt.xticks(rotation=45)
plt.show()
```

---

🔹 Step 11: Faculty-Student Interactions
```python
# Assign random faculty-student interaction counts
erp_data['Interactions'] = np.random.randint(5, 20, erp_data.shape[0])

# Plot histogram for faculty-student interactions
plt.figure(figsize=(10, 6))
sns.histplot(erp_data['Interactions'], bins=10, kde=True)
plt.title('Faculty-Student Interactions Frequency')
plt.xlabel('Number of Interactions')
plt.ylabel('Frequency')
plt.show()
```

---

🔹 Step 12: Training and Professional Development
```python
# Assign random training hours
erp_data['Training Hours'] = np.random.randint(10, 50, erp_data.shape[0])

# Scatter plot for Training Hours by Age
plt.figure(figsize=(10, 6))
sns.scatterplot(data=erp_data, x='Age', y='Training Hours', hue='Role', style='Gender')
plt.title('Training Hours by Age and Role')
plt.xlabel('Age')
plt.ylabel('Training Hours')
plt.show()
```


✨ Future Enhancements
✅ Add **real-time database support** (SQL or Firebase).  
✅ Build a **web-based UI** with **Streamlit, Flask, or Django**.  
✅ Enhance **interactive visualizations** with **Plotly/Dash**.  
